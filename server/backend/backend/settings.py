"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from dj_database_url import parse as db_url
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Prefer SECRET_KEY; fall back to DJANGO_SECRET_KEY for docker-compose compatibility; final dev fallback.
SECRET_KEY = config('SECRET_KEY', default=config('DJANGO_SECRET_KEY', default='dev-insecure-key-change-me'))
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOW_CONTEXT_UPSERT_FOR_AUTHENTICATED = config(
    'ALLOW_CONTEXT_UPSERT_FOR_AUTHENTICATED',
    default=DEBUG,  # allow while DEBUG=True
    cast=bool
)



# Hosts allowed to serve this Django app
# Read from env (comma-separated); default to localhost for safety
ALLOWED_HOSTS = [
    h.strip()
    for h in config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',')
    if h.strip()
]


# Application definition

INSTALLED_APPS = [
    'api',
    'organization',  # organization app
    'worker',        # worker app
    'corsheaders',
    'rest_framework',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'

# New Django Allauth configuration to avoid deprecation warnings
ACCOUNT_SIGNUP_FIELDS = {
    'username': {'required': True},
    'email': {'required': True},
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

"""Email configuration: defaults to console backend if SMTP vars not provided."""
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='no-reply@example.com')
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=587)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=True)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)
EMAIL_TIMEOUT = config('EMAIL_TIMEOUT', cast=int, default=30)
if EMAIL_BACKEND.startswith('django.core.mail.backends.smtp') and not EMAIL_HOST:
    # Safety: fallback to console if misconfigured
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Serve static files efficiently in production (and dev with collected files)
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3'),
        cast=db_url
    )
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# Use an absolute URL (leading slash) so admin static assets resolve correctly
# e.g. /static/admin/css/base.css
STATIC_URL = '/static/'

# Where collectstatic will gather files for production (e.g., when DEBUG=False)
# Not required for local dev, but keeps deployment predictable
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Use compressed manifest storage for long-term caching and cache-busting
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

REST_AUTH = {
    'USE_JWT': True,
    # Disable legacy DRF authtoken model to avoid requiring rest_framework.authtoken
    'TOKEN_MODEL': None,
}

# JWT Configuration for offline PWA support
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # 1 hour access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),     # 2 days refresh token for offline support
    'ROTATE_REFRESH_TOKENS': True,                   # Generate new refresh token on each refresh
    'BLACKLIST_AFTER_ROTATION': True,               # Blacklist old refresh tokens
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('JWT_SECRET_KEY', default=SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=2),
}

# CORS configuration
CORS_ALLOW_CREDENTIALS = True
_base_cors = [
    'http://127.0.0.1:5173',
    'http://localhost:5173',
    'http://localhost:4173',
    'http://localhost:4200',
    'http://localhost:3011',
    'http://localhost:3017',
    'http://127.0.0.1:3011',
    'http://127.0.0.1:3017',
]
# Accept both legacy EXTRA_CORS_ORIGINS and CORS_ALLOWED_ORIGINS from env (comma-separated)
_extra_cors = [o.strip() for o in config('EXTRA_CORS_ORIGINS', default='', cast=str).split(',') if o.strip()]
_env_cors = [o.strip() for o in config('CORS_ALLOWED_ORIGINS', default='', cast=str).split(',') if o.strip()]
CORS_ALLOWED_ORIGINS = sorted(set(_base_cors + _extra_cors + _env_cors))
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

# CSRF trusted origins must include scheme and no trailing slash
CSRF_TRUSTED_ORIGINS = [
    o.strip() for o in config('CSRF_TRUSTED_ORIGINS', default='', cast=str).split(',') if o.strip()
]

# Security and proxy settings (Render/other PaaS pass X-Forwarded-Proto)
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=not DEBUG, cast=bool)
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=not DEBUG, cast=bool)
CSRF_COOKIE_SAMESITE = config('CSRF_COOKIE_SAMESITE', default='Lax')
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=(not DEBUG), cast=bool)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')